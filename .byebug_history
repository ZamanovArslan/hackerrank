c
queen_cord - index < 1
queen_cord_row
queen_cord_row ? queen_cord + index > n : queen_cord - index < 1
c
queen_cord + index > n
queen_cord - index < 1
[queen_cord - index, direction]
c
skip
c
skip
queen_cord_row ? [queen_cord + index, direction] : [queen_cord - index, direction]
range
c
l_b
r_b
bottom_direction
top_direction
right_direction
left_direction
c
queen_cord_row ? [queen_cord + index, direction] : [queen_cord - index, direction]
c
queen_cord_row ? [queen_cord + index, direction] : [queen_cord - index, direction]
range
c
queen_cord_row
range
exit
range
c
queen_cord + index > n
[queen_cord + index, direction]
range
c
exit
[queen_cord + index, direction]
c
[queen_cord + index, direction]
queen_cord_row
range
c
queen_cord + index
queen_cord_row ? [queen_cord + index, direction] : [queen_cord - index, direction]
c
queen_cord_row ? [queen_cord + index, direction] : [queen_cord - index, direction]
c
range
queen_cord_row ? [queen_cord + index, direction] : [queen_cord - index, direction]
c
queen_cord_row ? [queen_cord + index, direction] : [queen_cord - index, direction]
queen_cord
queen_cord_row ? [queen_cord + index, direction] : [direction, queen_cord + index]
c
queen_cord_row ? [queen_cord + index, direction] : [direction, queen_cord + index]
c
queen_cord_row ? [queen_cord + index, direction] : [direction, queen_cord + index]
c
(1..(c_q - 1)).to_a.reverse
c
l_b
l_t
c
queen_cord_row ? [queen_cord + index, direction] : [direction, queen_cord + (index)]
range
c
range
queen_cord_row ? [queen_cord + index, direction] : [direction, queen_cord + (index)]
c
range
queen_cord_row ? [queen_cord + index, direction] : [direction, queen_cord + (index)]
c
queen_cord_row ? [queen_cord + index, direction] : [direction, queen_cord + (index)]
c
queen_cord_row ? [queen_cord + index, direction] : [direction, queen_cord + (index)]
c
queen_cord_row ? [queen_cord + index, direction] : [direction, queen_cord + (index)]
c
queen_cord_row ? [queen_cord + index, direction] : [direction, queen_cord + (index)]
c
r_b
r_t
c
queen_cord
queen_cord_row ? [queen_cord + (index), direction] : [direction, queen_cord + (index)]
c
(1..(r_q - 1)).to_a.reverse
r_b
r_t
left_direction + right_direction + top_direction + bottom_direction
c
row_diff ? [direction + diff, direction] : [direction, direction + diff]
c
obstacle_present?(obstacles, row_diff ? [direction + diff, direction] : [direction, direction + diff])
row_diff ? [direction + diff, direction] : [direction, direction + diff]
range
c
bottom_direction
c
obstacle_present?(obstacles, queen_cord_row ? [queen_cord, direction] : [direction, queen_cord])
c
obstacle_present?(obstacles, queen_cord_row ? [queen_cord, direction] : [direction, queen_cord])
queen_cord_row ? [queen_cord, direction] : [direction, queen_cord]
c
c_q
(1..(r_q - 1)).to_a.reverse
bottom_direction
top_direction
skip
queen_cord_row ? [queen_cord, direction] : [direction, queen_cord]
range
exit
queen_cord
range
exit
bottom_direction
top_direction
c
exit
range
exit
queen_cord
r_q
range.to_a
range
c
exit
right_direction
c
queen_cord_row ? [queen_cord, direction] : [direction, queen_cord]
obstacle_present?(obstacles, queen_cord_row ? [queen_cord, direction] : [direction, queen_cord])
c
obstacle_present?(obstacles, queen_cord_row ? [queen_cord, direction] : [direction, queen_cord])
queen_cord_row ? [queen_cord, direction] : [direction, queen_cord]
exit
c
ranked[ranked_counter..-1]
ranked.last
ranked_counter
c
ranked_counter
score
c
prev_rank
c
rank
prev_rank
score >= rank
rank
c
rank
score
score >= rank
exit
ranked[ranked_counter..-1]
rank
prev_rank
position
c
ranked_counter
score
prev_rank
rank
exit
prev_rank
ranked_counter
rank
score
position
c
position
c
ranked_counter
position
ranked[ranked_counter..-1]
ranked_counter
prev_rank
score
result
c
ranked
player.size
result
c
exit
i
ranked[i..-1]
score >= prev_rank
player[-i]
exit
c
player.size
i
exit
rank > score
score
prev_rank
rank
c
exit
areas
exit
row_index
element
row_index
index
c
index
c
areas
c
areas
c
areas
c
areas.first
areas
c
areas
exit
 update_area(areas, closest_area_index, index, row_index)
exit
update_area(areas, closest_area_index, index, row_index)
update_area(areas, closest_area_index, index, row_index).first
update_area(areas, closest_area_index, index, row_index)
row_index
index
closest_area_index
areas
exit
c
result
c
exit
c
exit
row_index
index
result
c
result_index
coordinates == [index - 1, row_index - 1] || coordinates == [index, row_index - 1] || coordinates == [index - 1, row_index] || coordinates == [index + 1, row_index - 1]
coordinates == [index - 1, row_index - 1] || coordinates == [index, row_index - 1] ||
coordinates == [index - 1, row_index]
[index - 1, row_index]
[index - 1, row_index - 1]
coordinates
areas
row_index
c
row-index
index
idnex
c
row_index
